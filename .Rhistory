source("http://bioconductor.org/biocLite.R")
biocLite("IlluminaHumanMethylation450k.db")
q()
18.26/156.1*100
18.26/1561.1*100
decade  <- seq(1900,1960,10)
agegroup <- c(c(0,1), seq(5,55,10))
decade
agegroup
tb <- scan()
data.frame(decade=decade, agegroup, tb)
??rep
decade  <- rep(seq(1900,1960,10),8)
decade
decade  <- rep(seq(1900,1960,10),each=8)
decade
decade  <- rep(seq(1900,1960,10),8)
agegroup <- rep(c(c(0,1), seq(5,55,10)),each=7)
tb <- scan()
table242 <- data.frame(decade=decade, agegroup=agegroup, tb=tb, birthcohort=decade-agegroup)
table242
labrary(ggplot2)
library(ggplot2)
install.packages("ggplot2")
qplot(agegroup, tb, data=table242, colour=decade)
library(ggplot2)
qplot(agegroup, tb, data=table242, colour=decade)
qplot(agegroup, tb, data=table242, colour=decade, geom="line")
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
View(table242)
View(table242)
ggplot(table242, aes(agegroup, tb, colour=decade group=decade)) + geom_line()
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
tb <- scan()
table242 <- data.frame(decade=decade, agegroup=agegroup, tb=tb, birthcohort=decade-agegroup)
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
ggplot(table242, aes(agegroup, tb, group=birthcohort)) + geom_line()
qplot(agegroup, tb, data=table242, colour=decade)
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
ggplot(table242, aes(agegroup, tb, group=birthcohort)) + geom_line()
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
ggplot(table242, aes(agegroup, tb, group=decade))
ggplot(table242, aes(agegroup, tb, group=decade)) + geom_line()
?gsub
getwd()
install.packages("pROC")
library("pROC", lib.loc="C:/Program Files/R/R-3.0.2/library")
zyg <- read.table("zygosity-example.txt",header=T,as.is=T)
View(zyg)
zy <- read.table("zygosity-example.txt",header=T,as.is=T)
zyg <- zy[zy$c2Q4A0!=3]
View(zyg)
zyg <- zy[zy$c2Q4A0!=3,]
roc(zyg$GENO,zyg$c2Q4A0,percent=TRUE,ci=TRUE)  ##outcome of Area under the curve and 95% ci
roc(zyg$GENO,zyg$c2Q4A1,percent=TRUE,ci=TRUE)
roc(zyg$GENO,zyg$sex_C2Q4A0,percent=TRUE,ci=TRUE)
roc(zyg$GENO,zyg$sex_C2Q4A1.A2_C2Q4A0,percent=TRUE,ci=TRUE)
sum(zy$c2Q4A0!=3)
sum(zy$c2Q4A0=3)
sum(zy$c2Q4A0==3)
zy[zy$c2Q4A0!=3,]
zy[zy$c2Q4A0==3,]
1219/3355*100
1323/3355*100
q()
state.ID <- 1:100
levels <- c(rep(c(1,3),20,),rep(2,60))
?set.seed
set.seed(20140528)
income <- trunc(rnorm(100)*levels*1000000)
?rpois
rpois(50,4)
rpois(100,1)
rpois(100,levels)
rpois(100,levels)
population <- log10(rnorm(100))*100000
?abs
population <- abs(log10(rnorm(100)))*100000
death <- rpois(100, levels*population)
death <- trunc(rpois(100, levels*population)/1000)
data.all <- data.frame(state.ID, income, levels, population, death)
View(data.all)
income <- abs(trunc(rnorm(100)*levels*1000000))
data.all <- data.frame(state.ID, income, levels, population, death)
View(data.all)
population <- trunc(abs(log10(rnorm(100)))*100000)
data.all <- data.frame(state.ID, income, levels, population, death)
View(data.all)
population[is.na(population)] <- NA
data.all <- data.frame(state.ID, income, levels, population, death)
View(data.all)
?sample
dataA <- sample(data.all, 30)
dataA <- sample(data.all[1], 30)
dataA <- sample(data.all$state.ID, 30)
index <- sample(data.all$state.ID, 30)
dataA <- data.all[data.all$state.ID %in% index,]
View(dataA)
?`%in%`
index <- sample(data.all$state.ID, 80)
dataA <- data.all[data.all$state.ID %in% index,1:3]
View(dataA)
dataA <- data.all[,c(1,4,5)]
dataB <- data.all[,c(1,4,5)]
dataA <- data.all[data.all$state.ID %in% index,1:3]
View(dataA)
View(dataB)
names(dataB)[1] <- "country.ID"
View(dataB)
View(dataA)
write.csv(dataA)
write.csv(dataB)
?write.csv
write.csv(dataA, file="DataA.csv")
write.csv(dataB, file="DataB.csv")
getwd()
install.packages("knitr")
require(knitr)
SID  <- "Your Student ID"
ScoreNo <- c(ID1,ID2,ID3,ID4)
ScoreNo <- c(1,2,3,ID4)
ScoreNo <- c(1,2,3,4)
ScoreSID <- data.frame(
SID=SID)
View(ScoreSID)
ScoreSID <- data.frame(
SID=SID,
ScoreNo=ScoreNo)
View(ScoreSID)
source("http://bioconductor.org/biocLite.R")
biocLite("trio")
library(trio)
getwd()
?read.pedfile
ped<-read.pedfile("D:/data.ped")
ped<-read.pedfile("D:/data.ped",first.row=FALSE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,non.rs.IDs=TRUE)
geno<-read.table("ped.txt")
geno<-read.table("D:/ped.txt")
View(geno)
geno<-read.table("D:/ped.txt", header=TRUE, sep=',')
View(geno)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,sep=',', non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE, non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,sep=",", non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,sep=",")
ped<-read.pedfile("D:/data.ped",first.row=FALSE,coded="12",sep=",", non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,coded="12",sep=",", non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,coded="012",sep=",", non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE,coded="12",sep=",", non.rs.IDs=TRUE)
ped2<-read.pedfile("D:/data.ped")
ped2<-read.pedfile("D:/data2.ped")
ped2<-read.pedfile("D:/data2.ped",first.row=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=TRUE,coded="12",sep=",", non.rs.IDs=TRUE)
ped2<-read.pedfile("D:/data2.ped",first.row=FALSE)
ped2<-read.pedfile("D:/data2.ped",first.row=FALSE, non.rs.IDs=FALSE)
ped2<-read.pedfile("D:/data2.ped",first.row=TRUE, non.rs.IDs=FALSE)
a <- read.pedfile(geno,p2g=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE, coded="12",naVal=0, sep=",", non.rs.IDs=TRUE)
ped<-read.pedfile("D:/data.ped",first.row=FALSE, coded="12", naVal=0, sep=",", non.rs.IDs=TRUE)
t <- 123123213123123123123L
t <- 12345678901234567L
t
setwd("K:/MOOCs - Data Science Specialization/8. Practical Machine Learning/Writeup")
if (!file.exists("pml-training.csv")){download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="pml-training.csv", method="curl")}
if (!file.exists("pml-testing.csv")){download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="pml-testing.csv", method="curl")}
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
clean1 <- training[,!apply(training,2,anyNA)] #delete NA columns
clean2 <- clean1[,apply(clean1,2,function(x){sum(x=='')==0})] #delete empty columns
clean3 <- clean2[,-(1:7)] #remove irrelarent variables
suppressPackageStartupMessages(library(caret))
set.seed(20140727)
train <- clean3[inTrain,]
inTrain <- createDataPartition(y=clean3$classe, p=0.6, list=FALSE)
test <- clean3[-inTrain,]
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(doParallel))
cl<-makeCluster(6)
registerDoParallel(cl)
fitControl <- trainControl(method='cv', number=3)
modFit <- train(classe~., method='rf', trControl=fitControl, data=train)
inTrain <- createDataPartition(y=clean3$classe, p=0.6, list=FALSE)
train <- clean3[inTrain,]
test <- clean3[-inTrain,]
modFit <- train(classe~., method='rf', trControl=fitControl, data=train)
stopCluster(cl)
pred_train <- predict(modFit, newdata=train[,-53])
confusionMatrix(pred_train, train$classe)
pred_test <- predict(modFit, newdata=test[,-53])
confusionMatrix(pred_test, test$classe)
plot(varImp(modFit), main="Variable importance of 52 in prediction model")
answers <- as.character(predict(modFit, testing))
answers
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
